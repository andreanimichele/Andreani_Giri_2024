function [mean_phase,low_conf_angle,up_conf_angle,time_lag] = ...        MeanPHASE(WTR,periods,low_filter_period,up_filter_period,alfa)%MEANPHASE (Circular) mean of wavelet phases (with CI) and time-lag %                         %**************************************************************************.% We use circular mean for the mean of phases so that we can% compute confidence intervals; see Zar [8], pp. 598-599, 604 and% also Berens [2].%************************************************************************** %% [mean_phase,low_conf_angle,up_conf_angle,time_lag] = ...%        MeanPHASE(WTR,periods,low_filter_period,up_filter_period,alfa)%   Computation of mean wavelet phase (or phase-difference or partial %   phase-difference) correponding to selected periods (frequency%   band defined by low_filter_period,up_filter_period).%   The vector of periods (periods) constructed during the computation of %   the transform WTR (by AWT, AWCOG or MPAWCOG) is needed.%   We  must also give as input the lower period (low_filter_period) and %   upper period (up_filter_period) corresponding to the frequency band %   where the mean phase is desired.%   The (1-alfa)x100% confidence interval for the mean may also be computed. %   alfa may take the values : 0.2, 0.1, 0.05, 0.025 or 0.01%   There is no need of any other matlab toolbox %*************************************************************************%%   INPUTS:%      WTR - can be:%           WT (first output of AWT) - to compute phase%           WCO (first output of AWCOG) - to compute phase-diff. using coherency %           WCross (second output of AWCOG) - to compute  phase-diff. using cross%           PWCO (second output of MPWCOG) - to compute partial phase-diff.%%      periods - vector of the wavelet periods %               (output of AWT, AWCOG or MPAWCOG).%%  Optional inputs:%      low_filter_period - lower value of the period used for filtering %                          By default, low_filter_period = periods(1) %                          %      up_filter_period - upper value of the period used for filtering %                         By default,  up_filter_period = periods(end)%                         %                        %      alfa -  to compute a 100x(1-alfa)% CI for the mean%              By default, alfa = 0.05; allowed values for alfa are:%              0.2, 0.1, 0.05, 0.025 or 0.01%%   OUTPUTS:%       mean_phase - Mean phase (or phase-difference or partial%                    phase-difference) for periods between %                    low_filter_period and up_filter_period%       low_conf_angle - lower confidence limit (angle) of the mean%                                %       up_conf_angle - upper confidence limit (angle) of the mean%                                 %       time_lag - Instantaneous time-lag correspondind to the %                 (mean) phase-difference/partial phase-difference %% *************************************************************************%  NOTE: time_lag should only be computed in case of phase-difference or%        partial phase-difference.% *************************************************************************%% Example:% see Example2_Coherency and Example4_Gains in Examples.%                           % See also: AWT, AWCOG and MPAWCOG%% Copyright 2018, L. Aguiar-Conraria and M.J. Soares%   This software may be used, copied, or redistributed as long as it is %   not sold and this copyright notice is reproduced on each copy made. %   This routine is provided as is without any expres or implied %   warranties whatsoever. %   Please acknowledge the use of this software in any publications:%   Wavelet pahse software was provided by %   L. Aguiar-Conraria and M.J. Soares and is available at URL: %   https://sites.google.com/site/aguiarconraria/joanasoares-wavelets%   Please send a copy of such publications to either L. Aguiar-Conraria or%   M. J. Soares%   Luís AGUIAR-CONRARIA              Maria Joana SOARES                      %   Dep. Economics                    Dep. Mathematics and Applications   %   University of Minho               University of Minho%   4710-057 Braga                    4710-057 Braga%   PORTUGAL                          PORTUGAL                          %   lfaguiar@eeg.uminho.pt            jsoares@math.uminho.pt %   References:%   [1] Aguiar-Conraria, L. and Soares, M.J. (2014)%       "The Continuous Wavelet Transform: Moving beyond uni- and bivariate%       analysis", Journal of Economic Surveys, 28(2), 344-375.%   [2] Berens, P. (2009) "CircStat: A MATLAB Toolbox for Circular%                         Statistics", Journal of Statistical Software, %                         31 (10), 1--21. %   [3] Cazelles, B., Chavez, M., McMichael, A. J., and Hales, S. (2005)%       "Nonstationary Influence of El Niño on the Synchronous Dengue %       Epidemics in Thailand", PLoS Med., 2 (4), 313-318%   [4] Cazelles, B., Chavez, M., de Magny, G. C., Guégan, J-F and Hales, %       S.(2007), "Time-Dependent Spectral Analysis of Epidemiological %       Time-Series with Wavelets", Journal of the Royal Society Interface, %       4, 625—36.                               %   [5] Lilly, J.M. and Olhede, S. C. (2009), "Higher-Order Properties of %       Analytic Wavelets", IEEE Trans. Signal Process. 57 (1), 146-160.%   [6] Lilly, J.M. and Olhede, S. C.(2010), "On the Analytic Wavelet %       Transform", IEEE Transactions on Information Theory, 56 (8), %       4135-4156.%   [7] Torrence, C. and Compo, T.C. (1998), "A Prectical Guide to Wavelet %       Analysis", Bulletin of the American Meteorological Society, 79, %       605—618.%   [8] Zar, J.H (1996), Biostatistical Analysis, Prentice-Hall%%%%%%%%%%%%%%%     Tests on inputs and default values    %%%%%%%%%%%%%%%%% % Tests on inputs if nargin < 2    error('Must input WT and periods') end % Default parameters if ( nargin <3 || isempty(low_filter_period) || low_filter_period == 0 )    low_filter_period = periods(1); elseif ( low_filter_period < periods(1) )        disp('low_filterPeriod too low; first period used')        low_filter_period = periods(1); end if ( nargin <4 ||  isempty(up_filter_period) || up_filter_period == 0 )   up_filter_period = periods(end); elseif ( up_filter_period > periods(end) )    disp('up_filterPeriod too high; last period used')     up_filter_period = periods(end); end if ( nargin <5 )    alfa = 0.05; % By default, a 95% confidence interval is computed end                                              %******* Compute (mean) phase (over selected periods)******** ind_sel_periods = ((periods>=low_filter_period)&(periods<=up_filter_period));                   % Indexes of selected periods                     % Compute (mean) phase  WTR = WTR./abs(WTR); % Normalize WTR to make all vectors with unit length  WTRM = mean(WTR(ind_sel_periods,:)); % (Normalized) resultant vector                                 mean_phase = angle(WTRM); % (Circular) mean of selected phases if nargout > 1  % Compute CI    n = sum(ind_sel_periods); % Number of angles whose mean is computed                              % (at each point of time)    l_time = size(WTR,2); % Length of time vector    r = abs(WTRM);  % Norm of (normalized) resultant vector    d = zeros(1,l_time);    if n < 8        disp('Too few observations to compute CI; decrease dj');        d(1,:) = NaN;    else % Use formulas (25.24) and (25.25) of Zar        R = r*n;        if alfa == 0.2;            chi2_quantile =1.6424; %chi2inv(.80,1)        elseif alfa == 0.1             chi2_quantile = 2.7055; %chi2inv(.90,1)        elseif alfa == 0.05            chi2_quantile =  3.8415; %chi2inv(.95,1)        elseif alfa == 0.025            chi2_quantile =  5.0239; %chi2inv(.975,1)        elseif alfa == 0.01             chi2_quantile = 6.6349;%chi2inv(.99,1)        else            disp('alfa not admissible; we will use alfa=0.05, i.e. 95% CI')          chi2_quantile = 3.8415;        end        for it = 1:l_time                           if ( r(it)<.9 && r(it)>sqrt(chi2_quantile/(2*n)) )                cos_angle = sqrt(2*n*(2*R(it)^2-n*chi2_quantile)/(4*n-chi2_quantile))/R(it);                 d(it) = acos(cos_angle); % Formula (25.24) in Zar                                            elseif (r(it) >= .9)                cos_angle = sqrt(n^2-(n^2-R(it)^2)*exp(chi2_quantile/n))/R(it);                  d(it) = acos(cos_angle);% Formula (25.25) in Zar             else                                             disp(['Cannot use Zar formula at point ',num2str(it)]);                  d(it) = NaN;            end         end    end    low_conf_angle = mean_phase - d;    up_conf_angle = mean_phase + d; endif nargout > 3 % Compute Instantaneous Time-Lag 	mean_period = mean(periods(ind_sel_periods));% Mean of the selected periods	time_lag = (mean_phase*mean_period)/(2*pi);  % Instantaneous time-lag                                          % x and y for selected periods                                 endend %%%%%%%%%%%%% END of FUNCTION  %%%%%%%%%%%%%%%%%%%%%%%%%%%