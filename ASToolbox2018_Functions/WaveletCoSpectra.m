function cospectra = WaveletCoSpectra(matX,matY,dt,dj,low_period,up_period,...                         pad,mother,beta,gamma,wt_size,ws_size)%Wavelet coherencies of columns of two given  matrices%%cospectra = WaveletCoSpectra(matX,matY,dt,dj,low_period,up_period,...%                             pad,mother,be,ga,wt_size,ws_size)%  Computes all the complex wavelet coherencies of several series % (columns of two matrices)%  The coherencies can be computeted with Morlet or Generalized Morse Wavelets  %  It makes use of function AWCOG.% %   INPUT:%       matX, matY - matrices (with the same number of rows)%       matY can be either a column vector or a matrix with the %       same number of columns as matX%             %   Optional Inputs:%       dt - sampling rate (default: 1).%       dj - frequency resolution (1/dj=number of voices per octave)%           (default: 1/4).%       low_period - lower period of the decomposition (Default: 2*dt).%       up_period -  upper period of the decomposition %                    (Default: size(matX,1)*dt).%       pad - the type of pad to the series (boundary conditions):%             0 or 'zero' or []-> zero-pading (default)%             1 or 'reflexive' -> reflection at the boundaries%             2 or 'constant' -> constant (repeat first and last values)%       mother - the mother wavelet function %               0 or 'Morlet' -> Morlet wavelet (default)%               1 or  'GMW' ->  Generalized Morse Wavelet .   %       beta - the beta parameter for the GMW or the Morlet (w0) parameter:%             0 or []-> Default: 6.0 for 'Morlet'; 3.0 for 'GMW'                                                      %       gamma - the gamma parameter of the GMW %             0 or []->  Default: 3.0           %       wt_size - size of window in time %             0 or [] -> Default: windTime_size = 1;%       wt_size -  size of window in scale %            0 or []-> Default: windScale_size  = 1;          %            %   OUTPUT:%       cospectra - row-cell containing all the computed coherencies.%       % See also: AWCOG% Copyright 2018, L. Aguiar-Conraria and M.J. Soares%%%   Luís AGUIAR-CONRARIA              Maria Joana SOARES                      %   Dep. Economics                    Dep. Mathematics and Applications   %   University of Minho               University of Minho%   4710-057 Braga                    4710-057 Braga%   PORTUGAL                          PORTUGAL%                           %   lfaguiar@eeg.uminho.pt            jsoares@math.uminho.pt %%%%%%%%%%%%%%%%     Tests on inputs and default values    %%%%%%%%%%%%%%%%%if nargin<2    error('You must input 2 matrices');else    matX(any(isnan(matX)'),:) = []; % To delete empty spaces, etc    matY(any(isnan(matY)'),:) = [];    [nRowsX,nColsX]=size(matX);    [nRowsY,nColsY]=size(matY);    if nRowsX~= nRowsY      error('matrices matX and matY must have same number of rows');    elseif (nColsY~=1 && nColsY~= nColsX)       error('if matY is not a vector, matX and matY must have same number of columns');    endend% Default parameters if (nargin<3 || isempty(dt) || dt==0),  dt = 1; end if (nargin<4 || isempty(dj) || dj==0),  dj = 1./4; end if (nargin<5 || isempty(low_period) || low_period==0), low_period = 2*dt; end if (nargin<6 || isempty(up_period)|| up_period==0), up_period = nRowsX*dt; end if (nargin<7 || isempty(pad)), pad = 0; end                                                                                           %  if (nargin<8 || isempty(mother)), mother = 0; end if (nargin<9 || isempty(beta)), beta = 0; end if (nargin<10 || isempty(gamma) || gamma==0), gamma = 3.0; end if (nargin<11 || isempty(wt_size)|| wt_size==0), wt_size = 1; end  if (nargin<12 || isempty(ws_size) ||  ws_size==0), ws_size = 1; end cospectra=cell(1,nColsX); % Cell to accomodate all the coherenciesfor iCol=1:nColsX    x=matX(:,iCol); % Select column     if nColsY == 1;        y=matY;    else        y=matY(:,iCol);    end    % Compute Wavelet Coherency of selected columns with AWCO function     coherency = AWCOG(x,y,dt,dj,low_period,up_period,pad,mother,beta,gamma,...                      wt_size,ws_size);    % Save coherency in cell    cospectra{iCol}=coherency; end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%end